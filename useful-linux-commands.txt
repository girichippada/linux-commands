## checking file mount disk usage:
df -h

## Checking the free memory of the machine
free -h

## Checking the list of processes in the system
ps -aux

## Checking memory used by all files of a file mount
du -ah /dev/nvme0n1p1 | sort -rh | head -n 10

## Find all files whose size is more than 100 MB
sudo find / -type f -size +50M -exec ls -lh {} \; | awk '{ print $9 ": " $5 }'

## Delete all the logs of a file
sudo truncate -s 0 /var/log/messages

##  system journal logging service
sudo systemctl status rsyslog
sudo systemctl restart rsyslog

## journal logs:
ll /run/log/journal

## Find files modified older than the last 3 days
find /run/log/journal -type f -mtime +3

## delete
sudo find /run/log/journal -type f -mtime +3 -exec rm -f {} \;

list all files based on the size of a folder
du -h <target_folder_path>

## to copy the file or folder from s3 to a target folder:
aws s3 cp <s3_uri> <target_folder> --region <aws_region>

## Useful JVM Thread dump notes
Usually, a thread dump indicates who holds the lock with either “- locked <0x…> (at …)” or “Locked ownable synchronizers,” 
https://netflixtechblog.com/java-21-virtual-threads-dude-wheres-my-lock-3052540e231d

You can use the the system property jdk.tracePinnedThreads to emit a stack trace when a thread blocks while pinned. 
Running with the option -Djdk.tracePinnedThreads=full prints a complete stack trace when a thread blocks while pinned, highlighting native frames and frames holding monitors. Running with the option -Djdk.tracePinnedThreads=short limits the output to just the problematic frames.
 
